{"remainingRequest":"F:\\workspace\\jf_front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\jf_front_end\\src\\views\\demo\\playground\\page-cache\\params.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\workspace\\jf_front_end\\src\\views\\demo\\playground\\page-cache\\params.vue","mtime":1604992859727},{"path":"F:\\workspace\\jf_front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\workspace\\jf_front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\workspace\\jf_front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\workspace\\jf_front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovKioNCiAqIOW4puWPgui3r+eUseWkmue7hOWPguaVsOS9v+eUqOWQjOS4gOS4que7hOS7tuWunuS+i++8jOmcgOimgeWcqOe7hOS7tuWGhemDqOWvueWkmuS4quWPguaVsOeahOaDheWGtei/m+ihjOe7n+S4gOWkhOeQhg0KICog6L+Z6YeM566A5Y2V5ryU56S65aaC5L2V5qC55o2uIGlkIOeuoeeQhuWkmue7hOaVsOaNruWvueixoQ0KICovDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdkZW1vLXBsYXlncm91bmQtcGFnZS1jYWNoZS1wYXJhbXMnLA0KICBwcm9wczogew0KICAgIGlkOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0NCiAgfSwNCiAgZGF0YSAoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGRhdGFzOiBbXSwNCiAgICAgIGRhdGE6IHsgdmFsdWU6ICcnIH0NCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBzd2l0Y2hEYXRhIChpZCkgew0KICAgICAgbGV0IGRhdGEgPSB0aGlzLmRhdGFzW2lkXQ0KICAgICAgaWYgKCFkYXRhKSB7DQogICAgICAgIGRhdGEgPSB7IHZhbHVlOiAnJyB9DQogICAgICAgIHRoaXMuZGF0YXNbaWRdID0gZGF0YQ0KICAgICAgfQ0KICAgICAgdGhpcy5kYXRhID0gZGF0YQ0KICAgIH0NCiAgfSwNCiAgLy8g56ys5LiA5qyh6L+b5YWl5oiW5LuO5YW25LuW57uE5Lu25a+55bqU6Lev55Sx6L+b5YWl5pe26Kem5Y+RDQogIGJlZm9yZVJvdXRlRW50ZXIgKHRvLCBmcm9tLCBuZXh0KSB7DQogICAgY29uc3QgaWQgPSB0by5wYXJhbXMuaWQNCiAgICBpZiAoaWQpIHsNCiAgICAgIG5leHQoaW5zdGFuY2UgPT4gaW5zdGFuY2Uuc3dpdGNoRGF0YShpZCkpDQogICAgfSBlbHNlIHsNCiAgICAgIG5leHQobmV3IEVycm9yKCfmnKrmjIflrppJRCcpKQ0KICAgIH0NCiAgfSwNCiAgLy8g5Zyo5ZCM5LiA57uE5Lu25a+55bqU55qE5aSa5Liq6Lev55Sx6Ze05YiH5o2i5pe26Kem5Y+RDQogIGJlZm9yZVJvdXRlVXBkYXRlICh0bywgZnJvbSwgbmV4dCkgew0KICAgIGNvbnN0IGlkID0gdG8ucGFyYW1zLmlkDQogICAgaWYgKGlkKSB7DQogICAgICB0aGlzLnN3aXRjaERhdGEoaWQpDQogICAgICBuZXh0KCkNCiAgICB9IGVsc2Ugew0KICAgICAgbmV4dChuZXcgRXJyb3IoJ+acquaMh+WumklEJykpDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["params.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"params.vue","sourceRoot":"src/views/demo/playground/page-cache","sourcesContent":["<template>\r\n  <d2-container type=\"card\">\r\n    <template slot=\"header\">\r\n      <el-button\r\n        size=\"mini\"\r\n        type=\"primary\">\r\n        props.id = {{id}}\r\n      </el-button>\r\n    </template>\r\n    <p class=\"d2-mt-0\">在下面的输入框输入任意字符后，切换到其它页面，再回到此页时输入框文字保留，证明被缓存</p>\r\n    <p>注意：此页面根据不同 params 打开后数据不会混淆</p>\r\n    <el-row :gutter=\"10\">\r\n      <el-col :span=\"12\">\r\n        <p>el-input</p>\r\n        <el-input v-model=\"data.value\" placeholder=\"input here\" />\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <p>html input</p>\r\n        <div class=\"el-input el-input--default\">\r\n          <input v-model=\"data.value\" placeholder=\"input here\" class=\"el-input__inner\" />\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n  </d2-container>\r\n</template>\r\n\r\n<script>\r\n/**\r\n * 带参路由多组参数使用同一个组件实例，需要在组件内部对多个参数的情况进行统一处理\r\n * 这里简单演示如何根据 id 管理多组数据对象\r\n */\r\nexport default {\r\n  name: 'demo-playground-page-cache-params',\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      datas: [],\r\n      data: { value: '' }\r\n    }\r\n  },\r\n  methods: {\r\n    switchData (id) {\r\n      let data = this.datas[id]\r\n      if (!data) {\r\n        data = { value: '' }\r\n        this.datas[id] = data\r\n      }\r\n      this.data = data\r\n    }\r\n  },\r\n  // 第一次进入或从其他组件对应路由进入时触发\r\n  beforeRouteEnter (to, from, next) {\r\n    const id = to.params.id\r\n    if (id) {\r\n      next(instance => instance.switchData(id))\r\n    } else {\r\n      next(new Error('未指定ID'))\r\n    }\r\n  },\r\n  // 在同一组件对应的多个路由间切换时触发\r\n  beforeRouteUpdate (to, from, next) {\r\n    const id = to.params.id\r\n    if (id) {\r\n      this.switchData(id)\r\n      next()\r\n    } else {\r\n      next(new Error('未指定ID'))\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}